version: "3.8"
services:
  app:
    container_name: syntrade-backend
    build:
      context: .
      dockerfile: Dockerfile.backend
    image: syntrade-backend
    restart: always
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
      flask:
        condition: service_started
    ports:
      - "4000:4000"
    env_file:
      - .env
    volumes:
      - "./app:/usr/src/app"
    command: npm run start
  postgres:
    container_name: syntrade-database
    image: postgres:10.3
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file:
      - .env
  redis:
    container_name: syntrade-cache
    image: redis:6.2-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - ./redis:/data
  flask:
    container_name: syntrade-pricing
    build:
      context: .
      dockerfile: Dockerfile.pricing
    image: syntrade-pricing
    restart: always
    ports:
      - "5000:5000"
    expose:
      - "5000"
    env_file:
      - .env
    volumes:
      - "./pricing:/usr/src/pricing"
    command: gunicorn app:app --worker-class gevent --bind 0.0.0.0:5000
volumes:
  app:
  postgres:
  redis:
  flask:
networks:
  default:
    name: syntrade-network
    driver: bridge
    external: true
